@page "/courseedit/{CourseId:int}"
@rendermode InteractiveWebAssembly
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using LMS.Shared.DTOs.Course
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations




@if (course != null)
{
    <h3>Course : @course.Name</h3>
    @foreach (var module in course.Modules)
    {
          <div class="box">
        <table class="table">
            <thead>
                <tr>
                    <th>@module.Name</th>
                    <th></th>
                    <th></th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var activity in module.Activities)
                {
                    <tr>
                        <td>@activity.Name</td>
                        <td>@activity.Description</td>
                        <td>@activity.StartTime.ToString("yyyy-MM-dd")</td>
                        <td>@activity.EndTime.ToString("yyyy-MM-dd")</td>
                    </tr>
                }

            </tbody>
        </table>
        </div>
    }
}
        <style>
            .box {
                width: 100%;
                background: white;
                padding: 2.5rem;
                border-radius: 16px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            }
        </style>

        @code {
    [Parameter]
    public int CourseId { get; set; }
        [Inject]
        private IApiService _apiService { get; set; } = default!;

        private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

   
    private CourseDto? course;
   
   
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (_apiService != null)
                {
                    // course = await _apiService.CallApiGetAsync<CourseDto>($"Course/{CourseId}");
                    course = await _apiService.CallApiGetAsync<CourseDto>($"Course/{CourseId}");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("ApiService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while fetching course: {ex.Message}");
            }
        }


    }  


}


