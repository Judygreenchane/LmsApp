@page "/courselist"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using LMS.Shared.DTOs.Course
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
<h3>CourseList</h3>

@if (courses == null)
{
    <p>Loading....</p>
}
else
{
    <div class="box">
        <table class="table">
            <thead>
                <tr>
                    <th>Course</th>
                    <th>Description</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in courses)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Description</td>
                        <td>@item.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@item.EndDate.ToString("yyyy-MM-dd")</td>
                        <td><a href=@($"courseedit/{item.Id}")>Details</a></td>
                        @*  <td><a href=@($"courseoverview/{item.CourseId}")>Details</a></td> *@

                    </tr>
                }
            </tbody>
        </table>

        @foreach (var course in courses)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>@course.Name</th>


                    </tr>
                </thead>
                <tbody>
                    @foreach (var module in course.Modules)
                    {
                        <tr>
                            <td>@module.Name</td>
                            <td>@module.Description</td>
                            <td>@module.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@module.EndDate.ToString("yyyy-MM-dd")</td>


                        </tr>
                    }

                </tbody>
            </table>
        }


    </div>
}
<style>
    .box {
    width: 100%;

    background: white;
    padding: 2.5rem;
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    }
</style>
@code {

    [Inject]
    private IApiService _apiService { get; set; } = default!;

     private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private List<CourseDto>? courses;
    private CourseDto? course;
    int CourseId = 5;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                if (_apiService != null)
                {
                   // courses = (await _apiService.CallApiAsync<IEnumerable<CourseDto>>("Course/courselist"))?.ToList() ?? [];
                    courses = (await _apiService.CallApiGetAsync<IEnumerable<CourseDto>>("course"))?.ToList() ?? [];
                   // course = await _apiService.CallApiGetAsync<CourseDto>($"Course/{CourseId}");
                  //  <CourseDto>($"Course/{CourseId}?includeModules=true");
                    StateHasChanged(); // Trigger UI update after fetching data
                }
                else
                {
                    Console.WriteLine("ApiService is not initialized");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while fetching courses: {ex.Message}");
            }
        }


    }
}
